{
  "_args": [
    [
      {
        "raw": "gc-signals@https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
        "scope": null,
        "escapedName": "gc-signals",
        "name": "gc-signals",
        "rawSpec": "https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
        "spec": "https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
        "type": "remote"
      },
      "D:\\work\\agent2\\2\\s"
    ]
  ],
  "_from": "gc-signals@0.0.1",
  "_id": "gc-signals@0.0.1",
  "_inCache": true,
  "_location": "/gc-signals",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gc-signals@https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
    "scope": null,
    "escapedName": "gc-signals",
    "name": "gc-signals",
    "rawSpec": "https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
    "spec": "https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
  "_shasum": "91e3b7904168b58aa3dc78b619b7b4495b4038ab",
  "_shrinkwrap": null,
  "_spec": "gc-signals@https://registry.npmjs.org/gc-signals/-/gc-signals-0.0.1.tgz",
  "_where": "D:\\work\\agent2\\2\\s",
  "author": {
    "name": "Microsoft Corporation"
  },
  "bugs": {
    "url": "https://github.com/Microsoft/node-gc-signals/issues"
  },
  "dependencies": {},
  "description": "A primitive way to know when an object got garbage collected. It works by creating an object holding onto a numeric identifier. On de-construction that identifer is put into a list which can be consumed to learn whether an object was been gc'ed or not.",
  "devDependencies": {
    "typescript": "^2.1.0-dev.20160906"
  },
  "gypfile": true,
  "homepage": "https://github.com/Microsoft/node-gc-signals#readme",
  "license": "MIT",
  "main": "./src/index.js",
  "name": "gc-signals",
  "optionalDependencies": {},
  "readme": "\n## GC Signals\n\nA primitive way to know when an object got garbage collected. It works by creating an object holding onto a numeric identifier. On de-construction that identifer is put into a list which can be consumed to learn whether an object was been gc'ed or not.\n\n\n```\n\nconst {GCSignal, consumeSignals} = require('gc-signals');\n\nnew GCSignal(1);\nnew GCSignal(2);\nnew GCSignal(3);\n\n// gc happens...\n\nconsumeSignals() // [1,2,3];\n\n```\n\n### API\n\n```ts\nexport interface GCSignal {\n}\n/**\n * Create a new GC signal. When being garbage collected the passed\n * value is stored for later consumption.\n */\nexport declare const GCSignal: {\n    new (id: number): GCSignal;\n};\n/**\n * Consume ids of garbage collected signals.\n */\nexport declare function consumeSignals(): number[];\n/**\n * Get called when any call to `consumeSignals` yielded in a result.\n */\nexport declare function onDidGarbageCollectSignals(callback: (ids: number[]) => any): {\n    dispose(): void;\n};\n/**\n * Utility method to store a weak reference of an object\n * along with an identifier. The id will be used to track\n * garbage collection of the object.\n */\nexport declare function trackGarbageCollection(obj: any, id: number): number;\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Microsoft/node-gc-signals.git"
  },
  "scripts": {
    "dev": "tsc -w",
    "install": "node-gyp rebuild",
    "test": "node --expose-gc test/test.js"
  },
  "typings": "./src/index",
  "version": "0.0.1"
}
